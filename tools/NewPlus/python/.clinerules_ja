# Pythonライブラリの.clinerules

## ドキュメント要件

- `README.md` にはライブラリの概要、インストール手順、使用例を記載する
- APIリファレンスは Sphinx などのツールを使用して自動生成する
- すべての変更は `CHANGELOG.md` に記録し、バージョンアップデートを文書化する

## アーキテクチャ決定記録（ADR）

- 依存関係の追加、主要なAPI変更、デザインパターンの採用などの重要な決定は `/docs/adr` に記録する
- 各ADRは `/docs/adr/template.md` フォーマットに従い、背景、理由、代替案を記述する

## コードスタイルとパターン

- コードは **PEP8** に準拠し、静的解析ツールとして **flake8** を使用する
- 共通のユーティリティや共有ロジックは専用モジュールに整理し、DRY原則に従
- 型ヒントを使用して可読性と保守性を向上させる
- モジュールやパッケージは再利用性と拡張性を考慮して構成する
- パス文字列は `pathlib` を使用して操作する

## 命名規則

- プライベートのメンバ変数やメソッドはアンダースコアで始める
- クラス名はキャメルケース（PascalCase）を使用する
- 関数名はスネークケース（snake_case）を使用する
- 定数はすべて大文字のスネークケース（UPPER_SNAKE_CASE）を使用する
- モジュール名は小文字のスネークケース（lower_snake_case）を使用する
- パッケージ名は小文字のスネークケース（lower_snake_case）を使用する
- テストファイル名は `test_` プレフィックスを付ける
  *例：`test_module.py`*
- テストクラス名は `Test` プレフィックスを付ける
  *例：`TestMyClass`*
- テストメソッド名は `test_` プレフィックスを付ける
  *例：`test_addition`*

## コメントとdocstring

- 各モジュール、クラス、関数には **sphinx-notypesスタイル** のdocstringを記述する
  *docstringは体言止め（動詞で終わらない形）で書くこと*
- コードコメントも体言止めで記述する
- 記載例：

  ```python
  def add(a: int, b: int) -> int:
      """
      Add two numbers.

      :param a: The first number.
      :param b: The second number.
      :return: The sum of the two numbers.
      """
      return a + b
  ```

## テストガイドライン

- すべての機能に対して **pytest** を用いた単体テストを実装する
- 外部依存関係は**pytest-mock** を使用したfixtureとしてモックし、テストの独立性を確保する
- **pytest-cov** を用いてテストカバレッジを測定する
  *テストの実装はカバレッジを向上させるよう追加・改善すること*
- CI/CDパイプラインで自動テストを実行し、プルリクエスト時の品質を保証する

## リリースとバージョニング

- **セマンティックバージョニング（SemVer）** に従い、メジャー・マイナー・パッチバージョンを管理する
- `CHANGELOG.md` を更新し、ユーザーにバージョン変更を通知する

## デプロイとパッケージング

- **pyproject.toml** を使用してパッケージの依存関係とエントリポイントを定義する
- 配布前にビルドおよびテストプロセスを自動化する

## 環境設定

- 環境管理には **venv** を使用する
- 仮想環境はプロジェクトのルートディレクトリに `.venv` として作成する
